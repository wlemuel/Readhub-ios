//
//  SettingsViewController.swift
//  readhub
//
//  Created by Steve Lemuel on 11/8/19.
//  Copyright (c) 2019 Steve Lemuel. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import RxCocoa
import RxDataSources
import RxSwift
import UIKit

final class SettingsViewController: UIViewController {
    // MARK: - Public properties -

    var presenter: SettingsPresenterInterface!

    // MARK: - Private properties -

    var tableview: UITableView!

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()

        setupLayout()
        setupRx()
    }
}

// MARK: - Extensions -

extension SettingsViewController: SettingsViewInterface {
}

private extension SettingsViewController {
    func configure() {
        let output = Settings.ViewOutput()

        _ = presenter.configure(with: output)
    }

    func setupLayout() {
        title = "设置"
        
        tableview = UITableView(frame: view.frame, style: .plain).then {
            $0.register(UITableViewCell.self, forCellReuseIdentifier: "Cell")
        }

        view.addSubview(tableview)

        let items = Observable.just([
            SectionModel(model: "设置", items: ["触感反馈"]),
            SectionModel(model: "反馈", items: ["反馈", "邮件", "Telegram"]),
            SectionModel(model: "关于", items: ["好评鼓励", "分享给朋友", "作者 GitHub"]),
            SectionModel(model: "支持作者", items: ["😄 $0.99 - Buy me a cup of coffee"]),
        ])

        // 创建数据源
        let dataSource = RxTableViewSectionedReloadDataSource
        <SectionModel<String, String>>(configureCell: {
            _, tv, _, element in
            let cell = tv.dequeueReusableCell(withIdentifier: "Cell")!
            cell.textLabel?.text = "\(element)"
            cell.accessoryType = .disclosureIndicator
            return cell
        })

        dataSource.titleForHeaderInSection = { ds, index in
            ds.sectionModels[index].model
        }

        // 绑定单元格数据
        items
            .bind(to: tableview.rx.items(dataSource: dataSource))
            .disposed(by: disposeBag)
    }

    func setupRx() {
    }
}
