//
//  SettingsViewController.swift
//  readhub
//
//  Created by Steve Lemuel on 11/8/19.
//  Copyright (c) 2019 Steve Lemuel. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import RxCocoa
import RxDataSources
import RxSwift
import SafariServices
import UIKit

final class SettingsViewController: UIViewController {
    // MARK: - Public properties -

    var presenter: SettingsPresenterInterface!

    // MARK: - Private properties -

    private var tableview: UITableView!

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()

        setupLayout()
        setupRx()
    }
}

// MARK: - Extensions -

extension SettingsViewController: SettingsViewInterface {
}

private extension SettingsViewController {
    func configure() {
        let output = Settings.ViewOutput()

        _ = presenter.configure(with: output)
    }

    func setupLayout() {
        title = "ËÆæÁΩÆ"

        tableview = UITableView(frame: view.frame, style: .plain).then {
            $0.register(UITableViewCell.self, forCellReuseIdentifier: "Cell")
        }

        view.addSubview(tableview)
    }

    func setupRx() {
        let items = Observable.just([
            SectionModel(model: "ËÅîÁ≥ª", items: [
                SettingModel(type: .url, name: "ÂèçÈ¶à", url: kFeedbackUrl),
//                SettingModel(type: .plain, name: "ÈÇÆ‰ª∂", descr: "wlemuel@hotmail.com"),
                SettingModel(type: .plainUrl, name: "Telegram", descr: kTelegramUrl, url: kTelegramUrl),
            ]),
            SectionModel(model: "ÂÖ≥‰∫é", items: [
//                SettingModel(type: .url, name: "Â•ΩËØÑÈºìÂä±", url: ""),
                SettingModel(type: .url, name: "‰ΩúËÄÖ GitHub", url: kAuthorUrl),
            ]),
//            SectionModel(model: "ÊîØÊåÅ‰ΩúËÄÖ", items: [
//                SettingModel(type: .support, name: "üòÑ $0.99 - Buy me a cup of coffee"),
//            ]),
        ])

        // ÂàõÂª∫Êï∞ÊçÆÊ∫ê
        let dataSource = RxTableViewSectionedReloadDataSource
        <SectionModel<String, SettingModel>>(configureCell: {
            _, tv, _, model in
            var cell = tv.dequeueReusableCell(withIdentifier: "Cell")

            switch model.type {
            case .url, .support:
                cell = UITableViewCell(style: .default, reuseIdentifier: "Cell")
                cell?.accessoryType = .disclosureIndicator
            case .plain, .plainUrl:
                cell = UITableViewCell(style: .value1, reuseIdentifier: "Cell")
                cell?.detailTextLabel?.text = model.descr
                cell?.detailTextLabel?.adjustsFontSizeToFitWidth = true
            }

            cell?.selectionStyle = .none
            cell?.textLabel?.text = model.name

            return cell!
        })

        dataSource.titleForHeaderInSection = { ds, index in
            ds.sectionModels[index].model
        }

        // ÁªëÂÆöÂçïÂÖÉÊ†ºÊï∞ÊçÆ
        items
            .bind(to: tableview.rx.items(dataSource: dataSource))
            .disposed(by: disposeBag)

        tableview.rx.modelSelected(SettingModel.self)
            .subscribe(onNext: { [weak self] model in
                guard let `self` = self else { return }

                switch model.type {
                case .url, .plainUrl:
                    self.gotoUrl(rawUrl: model.url)
                default: break
                }
            }).disposed(by: disposeBag)
    }

    func gotoUrl(rawUrl: String) {
        if let url = URL(string: rawUrl) {
            let safariConfig = SFSafariViewController.Configuration()
            safariConfig.entersReaderIfAvailable = false

            let safariVC = SFSafariViewController(url: url, configuration: safariConfig)
            present(safariVC, animated: true, completion: nil)
        }
    }
}
